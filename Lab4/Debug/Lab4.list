
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c44  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002dcc  08002dcc  00003dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ddc  08002ddc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ddc  08002ddc  00003ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002de4  08002de4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de4  08002de4  00003de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002de8  08002de8  00003de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002dec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000b0  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7fd  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aad  00000000  00000000  0000e839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  000102e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000087c  00000000  00000000  00010de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211fc  00000000  00000000  0001165c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c8b9  00000000  00000000  00032858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1987  00000000  00000000  0003f111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110a98  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002df4  00000000  00000000  00110adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  001138d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002db4 	.word	0x08002db4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002db4 	.word	0x08002db4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08c      	sub	sp, #48	@ 0x30
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fb2d 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f897 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f9b5 	bl	8000834 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004ca:	f000 f8f1 	bl	80006b0 <MX_ADC1_Init>
  MX_TIM4_Init();
 80004ce:	f000 f941 	bl	8000754 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80004d2:	2100      	movs	r1, #0
 80004d4:	4844      	ldr	r0, [pc, #272]	@ (80005e8 <main+0x130>)
 80004d6:	f001 ffb9 	bl	800244c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80004da:	2104      	movs	r1, #4
 80004dc:	4842      	ldr	r0, [pc, #264]	@ (80005e8 <main+0x130>)
 80004de:	f001 ffb5 	bl	800244c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004e2:	2108      	movs	r1, #8
 80004e4:	4840      	ldr	r0, [pc, #256]	@ (80005e8 <main+0x130>)
 80004e6:	f001 ffb1 	bl	800244c <HAL_TIM_PWM_Start>
  int brightness1 = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int direction1 = 1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  int brightness2 = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	627b      	str	r3, [r7, #36]	@ 0x24
  int direction2 = 3;
 80004f6:	2303      	movs	r3, #3
 80004f8:	623b      	str	r3, [r7, #32]
  int brightness3 = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]
  int direction3 = 5;
 80004fe:	2305      	movs	r3, #5
 8000500:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ADC_ChannelConfTypeDef adc_channel_config = {
 8000502:	463b      	mov	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	2303      	movs	r3, #3
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	2307      	movs	r3, #7
 8000518:	60bb      	str	r3, [r7, #8]
	      .Rank = 1,
	      .SamplingTime = ADC_SAMPLETIME_480CYCLES,
	      .Channel = ADC_CHANNEL_3
	  };

	  HAL_ADC_ConfigChannel(&hadc1, &adc_channel_config);
 800051a:	463b      	mov	r3, r7
 800051c:	4619      	mov	r1, r3
 800051e:	4833      	ldr	r0, [pc, #204]	@ (80005ec <main+0x134>)
 8000520:	f000 fe4a 	bl	80011b8 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc1);
 8000524:	4831      	ldr	r0, [pc, #196]	@ (80005ec <main+0x134>)
 8000526:	f000 fbaf 	bl	8000c88 <HAL_ADC_Start>
	  HAL_StatusTypeDef status = HAL_ADC_PollForConversion(&hadc1, 1);
 800052a:	2101      	movs	r1, #1
 800052c:	482f      	ldr	r0, [pc, #188]	@ (80005ec <main+0x134>)
 800052e:	f000 fc7d 	bl	8000e2c <HAL_ADC_PollForConversion>
 8000532:	4603      	mov	r3, r0
 8000534:	75fb      	strb	r3, [r7, #23]

	  if (status != HAL_OK)
 8000536:	7dfb      	ldrb	r3, [r7, #23]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d152      	bne.n	80005e2 <main+0x12a>
	      continue;

	  unsigned int value = HAL_ADC_GetValue(&hadc1);
 800053c:	482b      	ldr	r0, [pc, #172]	@ (80005ec <main+0x134>)
 800053e:	f000 fe10 	bl	8001162 <HAL_ADC_GetValue>
 8000542:	6138      	str	r0, [r7, #16]
	  brightness1 += direction1;
 8000544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000548:	4413      	add	r3, r2
 800054a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	  if (brightness1 > 4095) {
 800054c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800054e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000552:	db06      	blt.n	8000562 <main+0xaa>
	      direction1 *= -1;
 8000554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000556:	425b      	negs	r3, r3
 8000558:	62bb      	str	r3, [r7, #40]	@ 0x28
	      brightness1 = 4095;
 800055a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800055e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000560:	e007      	b.n	8000572 <main+0xba>
	  } else if (brightness1 < 0) {
 8000562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000564:	2b00      	cmp	r3, #0
 8000566:	da04      	bge.n	8000572 <main+0xba>
	      direction1 *= -1;
 8000568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800056a:	425b      	negs	r3, r3
 800056c:	62bb      	str	r3, [r7, #40]	@ 0x28
	      brightness1 = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  }

	  TIM4->CCR1 = brightness1;
 8000572:	4a1f      	ldr	r2, [pc, #124]	@ (80005f0 <main+0x138>)
 8000574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000576:	6353      	str	r3, [r2, #52]	@ 0x34
	  brightness2 += direction2;
 8000578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800057a:	6a3b      	ldr	r3, [r7, #32]
 800057c:	4413      	add	r3, r2
 800057e:	627b      	str	r3, [r7, #36]	@ 0x24

	  if (brightness2 > 4095) {
 8000580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000586:	db06      	blt.n	8000596 <main+0xde>
	      direction2 *= -1;
 8000588:	6a3b      	ldr	r3, [r7, #32]
 800058a:	425b      	negs	r3, r3
 800058c:	623b      	str	r3, [r7, #32]
	      brightness2 = 4095;
 800058e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000592:	627b      	str	r3, [r7, #36]	@ 0x24
 8000594:	e007      	b.n	80005a6 <main+0xee>
	  } else if (brightness2 < 0) {
 8000596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000598:	2b00      	cmp	r3, #0
 800059a:	da04      	bge.n	80005a6 <main+0xee>
	      direction2 *= -1;
 800059c:	6a3b      	ldr	r3, [r7, #32]
 800059e:	425b      	negs	r3, r3
 80005a0:	623b      	str	r3, [r7, #32]
	      brightness2 = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	627b      	str	r3, [r7, #36]	@ 0x24
	  }

	  TIM4->CCR2 = brightness2;
 80005a6:	4a12      	ldr	r2, [pc, #72]	@ (80005f0 <main+0x138>)
 80005a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005aa:	6393      	str	r3, [r2, #56]	@ 0x38

	  brightness3 += direction3;
 80005ac:	69fa      	ldr	r2, [r7, #28]
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	4413      	add	r3, r2
 80005b2:	61fb      	str	r3, [r7, #28]

	  if (brightness3 > 4095) {
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80005ba:	db06      	blt.n	80005ca <main+0x112>
	      direction3 *= -1;
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	425b      	negs	r3, r3
 80005c0:	61bb      	str	r3, [r7, #24]
	      brightness3 = 4095;
 80005c2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80005c6:	61fb      	str	r3, [r7, #28]
 80005c8:	e007      	b.n	80005da <main+0x122>
	  } else if (brightness3 < 0) {
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da04      	bge.n	80005da <main+0x122>
	      direction3 *= -1;
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	425b      	negs	r3, r3
 80005d4:	61bb      	str	r3, [r7, #24]
	      brightness3 = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
	  }

	  TIM4->CCR3 = brightness3;
 80005da:	4a05      	ldr	r2, [pc, #20]	@ (80005f0 <main+0x138>)
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80005e0:	e78f      	b.n	8000502 <main+0x4a>
	      continue;
 80005e2:	bf00      	nop
  {
 80005e4:	e78d      	b.n	8000502 <main+0x4a>
 80005e6:	bf00      	nop
 80005e8:	20000070 	.word	0x20000070
 80005ec:	20000028 	.word	0x20000028
 80005f0:	40000800 	.word	0x40000800

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	@ 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	@ 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fbaa 	bl	8002d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b22      	ldr	r3, [pc, #136]	@ (80006a8 <SystemClock_Config+0xb4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <SystemClock_Config+0xb4>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	@ 0x40
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <SystemClock_Config+0xb4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <SystemClock_Config+0xb8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ac <SystemClock_Config+0xb8>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <SystemClock_Config+0xb8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065c:	2300      	movs	r3, #0
 800065e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fa7d 	bl	8001b64 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000670:	f000 f908 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fce0 	bl	8002054 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800069a:	f000 f8f3 	bl	8000884 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	@ 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c2:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <MX_ADC1_Init+0x98>)
 80006c4:	4a21      	ldr	r2, [pc, #132]	@ (800074c <MX_ADC1_Init+0x9c>)
 80006c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <MX_ADC1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <MX_ADC1_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006da:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e0:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_ADC1_Init+0x98>)
 80006f0:	4a17      	ldr	r2, [pc, #92]	@ (8000750 <MX_ADC1_Init+0xa0>)
 80006f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_ADC1_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <MX_ADC1_Init+0x98>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_ADC1_Init+0x98>)
 800070a:	2201      	movs	r2, #1
 800070c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070e:	480e      	ldr	r0, [pc, #56]	@ (8000748 <MX_ADC1_Init+0x98>)
 8000710:	f000 fa76 	bl	8000c00 <HAL_ADC_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800071a:	f000 f8b3 	bl	8000884 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800071e:	2303      	movs	r3, #3
 8000720:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	@ (8000748 <MX_ADC1_Init+0x98>)
 8000730:	f000 fd42 	bl	80011b8 <HAL_ADC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800073a:	f000 f8a3 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000028 	.word	0x20000028
 800074c:	40012000 	.word	0x40012000
 8000750:	0f000001 	.word	0x0f000001

08000754 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
 8000772:	615a      	str	r2, [r3, #20]
 8000774:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000776:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <MX_TIM4_Init+0xd8>)
 8000778:	4a2d      	ldr	r2, [pc, #180]	@ (8000830 <MX_TIM4_Init+0xdc>)
 800077a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800077c:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <MX_TIM4_Init+0xd8>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_TIM4_Init+0xd8>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4096;
 8000788:	4b28      	ldr	r3, [pc, #160]	@ (800082c <MX_TIM4_Init+0xd8>)
 800078a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800078e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000790:	4b26      	ldr	r3, [pc, #152]	@ (800082c <MX_TIM4_Init+0xd8>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b25      	ldr	r3, [pc, #148]	@ (800082c <MX_TIM4_Init+0xd8>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800079c:	4823      	ldr	r0, [pc, #140]	@ (800082c <MX_TIM4_Init+0xd8>)
 800079e:	f001 fe05 	bl	80023ac <HAL_TIM_PWM_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80007a8:	f000 f86c 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4619      	mov	r1, r3
 80007ba:	481c      	ldr	r0, [pc, #112]	@ (800082c <MX_TIM4_Init+0xd8>)
 80007bc:	f002 fa52 	bl	8002c64 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80007c6:	f000 f85d 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ca:	2360      	movs	r3, #96	@ 0x60
 80007cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	4812      	ldr	r0, [pc, #72]	@ (800082c <MX_TIM4_Init+0xd8>)
 80007e2:	f001 fefb 	bl	80025dc <HAL_TIM_PWM_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80007ec:	f000 f84a 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2204      	movs	r2, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	480d      	ldr	r0, [pc, #52]	@ (800082c <MX_TIM4_Init+0xd8>)
 80007f8:	f001 fef0 	bl	80025dc <HAL_TIM_PWM_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000802:	f000 f83f 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2208      	movs	r2, #8
 800080a:	4619      	mov	r1, r3
 800080c:	4807      	ldr	r0, [pc, #28]	@ (800082c <MX_TIM4_Init+0xd8>)
 800080e:	f001 fee5 	bl	80025dc <HAL_TIM_PWM_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000818:	f000 f834 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800081c:	4803      	ldr	r0, [pc, #12]	@ (800082c <MX_TIM4_Init+0xd8>)
 800081e:	f000 f8cd 	bl	80009bc <HAL_TIM_MspPostInit>

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	@ 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000070 	.word	0x20000070
 8000830:	40000800 	.word	0x40000800

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <MX_GPIO_Init+0x4c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a0f      	ldr	r2, [pc, #60]	@ (8000880 <MX_GPIO_Init+0x4c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <MX_GPIO_Init+0x4c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_GPIO_Init+0x4c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <MX_GPIO_Init+0x4c>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_GPIO_Init+0x4c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <Error_Handler+0x8>

08000890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	4a0f      	ldr	r2, [pc, #60]	@ (80008dc <HAL_MspInit+0x4c>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a6:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	4a08      	ldr	r2, [pc, #32]	@ (80008dc <HAL_MspInit+0x4c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <HAL_ADC_MspInit+0x8c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d12f      	bne.n	8000962 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <HAL_ADC_MspInit+0x90>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a19      	ldr	r2, [pc, #100]	@ (8000970 <HAL_ADC_MspInit+0x90>)
 800090c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_ADC_MspInit+0x90>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <HAL_ADC_MspInit+0x90>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <HAL_ADC_MspInit+0x90>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <HAL_ADC_MspInit+0x90>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800093a:	2338      	movs	r3, #56	@ 0x38
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4809      	ldr	r0, [pc, #36]	@ (8000974 <HAL_ADC_MspInit+0x94>)
 800094e:	f000 ff6d 	bl	800182c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2012      	movs	r0, #18
 8000958:	f000 ff31 	bl	80017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800095c:	2012      	movs	r0, #18
 800095e:	f000 ff4a 	bl	80017f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	@ 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40012000 	.word	0x40012000
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000

08000978 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0b      	ldr	r2, [pc, #44]	@ (80009b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d10d      	bne.n	80009a6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <HAL_TIM_PWM_MspInit+0x40>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	4a09      	ldr	r2, [pc, #36]	@ (80009b8 <HAL_TIM_PWM_MspInit+0x40>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6413      	str	r3, [r2, #64]	@ 0x40
 800099a:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <HAL_TIM_PWM_MspInit+0x40>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40000800 	.word	0x40000800
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <HAL_TIM_MspPostInit+0x68>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d11e      	bne.n	8000a1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <HAL_TIM_MspPostInit+0x6c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <HAL_TIM_MspPostInit+0x6c>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <HAL_TIM_MspPostInit+0x6c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80009fa:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80009fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <HAL_TIM_MspPostInit+0x70>)
 8000a18:	f000 ff08 	bl	800182c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40000800 	.word	0x40000800
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <MemManage_Handler+0x4>

08000a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a86:	f000 f89b 	bl	8000bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <ADC_IRQHandler+0x10>)
 8000a96:	f000 fa54 	bl	8000f42 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000028 	.word	0x20000028

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000acc:	f7ff ffea 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f002 f939 	bl	8002d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fcdd 	bl	80004b8 <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b0c:	08002dec 	.word	0x08002dec
  ldr r2, =_sbss
 8000b10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b14:	200000bc 	.word	0x200000bc

08000b18 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <CAN1_RX0_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <HAL_Init+0x40>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <HAL_Init+0x40>)
 8000b32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_Init+0x40>)
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 fe2f 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f000 f808 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fe9e 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023c00 	.word	0x40023c00

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_InitTick+0x54>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_InitTick+0x58>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fe47 	bl	8001812 <HAL_SYSTICK_Config>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00e      	b.n	8000bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d80a      	bhi.n	8000baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 fe0f 	bl	80017be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba0:	4a06      	ldr	r2, [pc, #24]	@ (8000bbc <HAL_InitTick+0x5c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_IncTick+0x24>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <HAL_IncTick+0x24>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008
 8000be4:	200000b8 	.word	0x200000b8

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	@ (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200000b8 	.word	0x200000b8

08000c00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e033      	b.n	8000c7e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d109      	bne.n	8000c32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fe5e 	bl	80008e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d118      	bne.n	8000c70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c46:	f023 0302 	bic.w	r3, r3, #2
 8000c4a:	f043 0202 	orr.w	r2, r3, #2
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 fbd2 	bl	80013fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	f023 0303 	bic.w	r3, r3, #3
 8000c66:	f043 0201 	orr.w	r2, r3, #1
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c6e:	e001      	b.n	8000c74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d101      	bne.n	8000ca2 <HAL_ADC_Start+0x1a>
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	e0b2      	b.n	8000e08 <HAL_ADC_Start+0x180>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d018      	beq.n	8000cea <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f042 0201 	orr.w	r2, r2, #1
 8000cc6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cc8:	4b52      	ldr	r3, [pc, #328]	@ (8000e14 <HAL_ADC_Start+0x18c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a52      	ldr	r2, [pc, #328]	@ (8000e18 <HAL_ADC_Start+0x190>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	0c9a      	lsrs	r2, r3, #18
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000cdc:	e002      	b.n	8000ce4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f9      	bne.n	8000cde <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d17a      	bne.n	8000dee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d007      	beq.n	8000d2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d36:	d106      	bne.n	8000d46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3c:	f023 0206 	bic.w	r2, r3, #6
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	645a      	str	r2, [r3, #68]	@ 0x44
 8000d44:	e002      	b.n	8000d4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d54:	4b31      	ldr	r3, [pc, #196]	@ (8000e1c <HAL_ADC_Start+0x194>)
 8000d56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000d60:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 031f 	and.w	r3, r3, #31
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d12a      	bne.n	8000dc4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a2b      	ldr	r2, [pc, #172]	@ (8000e20 <HAL_ADC_Start+0x198>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d015      	beq.n	8000da4 <HAL_ADC_Start+0x11c>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <HAL_ADC_Start+0x19c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d105      	bne.n	8000d8e <HAL_ADC_Start+0x106>
 8000d82:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <HAL_ADC_Start+0x194>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 031f 	and.w	r3, r3, #31
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00a      	beq.n	8000da4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a25      	ldr	r2, [pc, #148]	@ (8000e28 <HAL_ADC_Start+0x1a0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d136      	bne.n	8000e06 <HAL_ADC_Start+0x17e>
 8000d98:	4b20      	ldr	r3, [pc, #128]	@ (8000e1c <HAL_ADC_Start+0x194>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d130      	bne.n	8000e06 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d129      	bne.n	8000e06 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	e020      	b.n	8000e06 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a15      	ldr	r2, [pc, #84]	@ (8000e20 <HAL_ADC_Start+0x198>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d11b      	bne.n	8000e06 <HAL_ADC_Start+0x17e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d114      	bne.n	8000e06 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	e00b      	b.n	8000e06 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	f043 0210 	orr.w	r2, r3, #16
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	f043 0201 	orr.w	r2, r3, #1
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	20000000 	.word	0x20000000
 8000e18:	431bde83 	.word	0x431bde83
 8000e1c:	40012300 	.word	0x40012300
 8000e20:	40012000 	.word	0x40012000
 8000e24:	40012100 	.word	0x40012100
 8000e28:	40012200 	.word	0x40012200

08000e2c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e48:	d113      	bne.n	8000e72 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e58:	d10b      	bne.n	8000e72 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	f043 0220 	orr.w	r2, r3, #32
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e063      	b.n	8000f3a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e72:	f7ff feb9 	bl	8000be8 <HAL_GetTick>
 8000e76:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e78:	e021      	b.n	8000ebe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d01d      	beq.n	8000ebe <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d007      	beq.n	8000e98 <HAL_ADC_PollForConversion+0x6c>
 8000e88:	f7ff feae 	bl	8000be8 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d212      	bcs.n	8000ebe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d00b      	beq.n	8000ebe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	f043 0204 	orr.w	r2, r3, #4
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e03d      	b.n	8000f3a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d1d6      	bne.n	8000e7a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f06f 0212 	mvn.w	r2, #18
 8000ed4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d123      	bne.n	8000f38 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d11f      	bne.n	8000f38 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d111      	bne.n	8000f38 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d105      	bne.n	8000f38 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f30:	f043 0201 	orr.w	r2, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f003 0320 	and.w	r3, r3, #32
 8000f70:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d049      	beq.n	800100c <HAL_ADC_IRQHandler+0xca>
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d046      	beq.n	800100c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d105      	bne.n	8000f96 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d12b      	bne.n	8000ffc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d127      	bne.n	8000ffc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d119      	bne.n	8000ffc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0220 	bic.w	r2, r2, #32
 8000fd6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d105      	bne.n	8000ffc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	f043 0201 	orr.w	r2, r3, #1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f8bd 	bl	800117c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f06f 0212 	mvn.w	r2, #18
 800100a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800101a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d057      	beq.n	80010d2 <HAL_ADC_IRQHandler+0x190>
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d054      	beq.n	80010d2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	2b00      	cmp	r3, #0
 8001032:	d105      	bne.n	8001040 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d139      	bne.n	80010c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001054:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001066:	2b00      	cmp	r3, #0
 8001068:	d12b      	bne.n	80010c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001074:	2b00      	cmp	r3, #0
 8001076:	d124      	bne.n	80010c2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001082:	2b00      	cmp	r3, #0
 8001084:	d11d      	bne.n	80010c2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800108a:	2b00      	cmp	r3, #0
 800108c:	d119      	bne.n	80010c2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800109c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d105      	bne.n	80010c2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	f043 0201 	orr.w	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fa96 	bl	80015f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f06f 020c 	mvn.w	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010e0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d017      	beq.n	8001118 <HAL_ADC_IRQHandler+0x1d6>
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d014      	beq.n	8001118 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d10d      	bne.n	8001118 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001100:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f841 	bl	8001190 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f06f 0201 	mvn.w	r2, #1
 8001116:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001126:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d015      	beq.n	800115a <HAL_ADC_IRQHandler+0x218>
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d012      	beq.n	800115a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001138:	f043 0202 	orr.w	r2, r3, #2
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f06f 0220 	mvn.w	r2, #32
 8001148:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f82a 	bl	80011a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f06f 0220 	mvn.w	r2, #32
 8001158:	601a      	str	r2, [r3, #0]
  }
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x1c>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e105      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x228>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b09      	cmp	r3, #9
 80011e2:	d925      	bls.n	8001230 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68d9      	ldr	r1, [r3, #12]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	4613      	mov	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	3b1e      	subs	r3, #30
 80011fa:	2207      	movs	r2, #7
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43da      	mvns	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	400a      	ands	r2, r1
 8001208:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68d9      	ldr	r1, [r3, #12]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	4603      	mov	r3, r0
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4403      	add	r3, r0
 8001222:	3b1e      	subs	r3, #30
 8001224:	409a      	lsls	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	e022      	b.n	8001276 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6919      	ldr	r1, [r3, #16]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	2207      	movs	r2, #7
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	400a      	ands	r2, r1
 8001252:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6919      	ldr	r1, [r3, #16]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	4603      	mov	r3, r0
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4403      	add	r3, r0
 800126c:	409a      	lsls	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b06      	cmp	r3, #6
 800127c:	d824      	bhi.n	80012c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	3b05      	subs	r3, #5
 8001290:	221f      	movs	r2, #31
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	400a      	ands	r2, r1
 800129e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	3b05      	subs	r3, #5
 80012ba:	fa00 f203 	lsl.w	r2, r0, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80012c6:	e04c      	b.n	8001362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	d824      	bhi.n	800131a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	3b23      	subs	r3, #35	@ 0x23
 80012e2:	221f      	movs	r2, #31
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43da      	mvns	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	400a      	ands	r2, r1
 80012f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	3b23      	subs	r3, #35	@ 0x23
 800130c:	fa00 f203 	lsl.w	r2, r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	631a      	str	r2, [r3, #48]	@ 0x30
 8001318:	e023      	b.n	8001362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	3b41      	subs	r3, #65	@ 0x41
 800132c:	221f      	movs	r2, #31
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	400a      	ands	r2, r1
 800133a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	3b41      	subs	r3, #65	@ 0x41
 8001356:	fa00 f203 	lsl.w	r2, r0, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001362:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <HAL_ADC_ConfigChannel+0x234>)
 8001364:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <HAL_ADC_ConfigChannel+0x238>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d109      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1cc>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b12      	cmp	r3, #18
 8001376:	d105      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	@ (80013f0 <HAL_ADC_ConfigChannel+0x238>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d123      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x21e>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b10      	cmp	r3, #16
 8001394:	d003      	beq.n	800139e <HAL_ADC_ConfigChannel+0x1e6>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b11      	cmp	r3, #17
 800139c:	d11b      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b10      	cmp	r3, #16
 80013b0:	d111      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_ADC_ConfigChannel+0x23c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a10      	ldr	r2, [pc, #64]	@ (80013f8 <HAL_ADC_ConfigChannel+0x240>)
 80013b8:	fba2 2303 	umull	r2, r3, r2, r3
 80013bc:	0c9a      	lsrs	r2, r3, #18
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013c8:	e002      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f9      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40012300 	.word	0x40012300
 80013f0:	40012000 	.word	0x40012000
 80013f4:	20000000 	.word	0x20000000
 80013f8:	431bde83 	.word	0x431bde83

080013fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001404:	4b79      	ldr	r3, [pc, #484]	@ (80015ec <ADC_Init+0x1f0>)
 8001406:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	431a      	orrs	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6859      	ldr	r1, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	021a      	lsls	r2, r3, #8
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001454:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6859      	ldr	r1, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001476:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6899      	ldr	r1, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148e:	4a58      	ldr	r2, [pc, #352]	@ (80015f0 <ADC_Init+0x1f4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d022      	beq.n	80014da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6899      	ldr	r1, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6899      	ldr	r1, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	e00f      	b.n	80014fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0202 	bic.w	r2, r2, #2
 8001508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6899      	ldr	r1, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7e1b      	ldrb	r3, [r3, #24]
 8001514:	005a      	lsls	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d01b      	beq.n	8001560 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001536:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001546:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6859      	ldr	r1, [r3, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	3b01      	subs	r3, #1
 8001554:	035a      	lsls	r2, r3, #13
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	e007      	b.n	8001570 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800156e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800157e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	3b01      	subs	r3, #1
 800158c:	051a      	lsls	r2, r3, #20
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6899      	ldr	r1, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015b2:	025a      	lsls	r2, r3, #9
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6899      	ldr	r1, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	029a      	lsls	r2, r3, #10
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	609a      	str	r2, [r3, #8]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40012300 	.word	0x40012300
 80015f0:	0f000001 	.word	0x0f000001

080015f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	@ (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4907      	ldr	r1, [pc, #28]	@ (80016a4 <__NVIC_EnableIRQ+0x38>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	@ (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	@ (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	@ 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	@ 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001774:	d301      	bcc.n	800177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <SysTick_Config+0x40>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001782:	210f      	movs	r1, #15
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f7ff ff8e 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <SysTick_Config+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <SysTick_Config+0x40>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff29 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d0:	f7ff ff3e 	bl	8001650 <__NVIC_GetPriorityGrouping>
 80017d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff8e 	bl	80016fc <NVIC_EncodePriority>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff5d 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff31 	bl	800166c <__NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffa2 	bl	8001764 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	@ 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	e16b      	b.n	8001b20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001848:	2201      	movs	r2, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 815a 	bne.w	8001b1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b01      	cmp	r3, #1
 8001870:	d005      	beq.n	800187e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187a:	2b02      	cmp	r3, #2
 800187c:	d130      	bne.n	80018e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 0201 	and.w	r2, r3, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d017      	beq.n	800191c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d123      	bne.n	8001970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	08da      	lsrs	r2, r3, #3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3208      	adds	r2, #8
 8001930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	08da      	lsrs	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3208      	adds	r2, #8
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0203 	and.w	r2, r3, #3
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80b4 	beq.w	8001b1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b60      	ldr	r3, [pc, #384]	@ (8001b38 <HAL_GPIO_Init+0x30c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	4a5f      	ldr	r2, [pc, #380]	@ (8001b38 <HAL_GPIO_Init+0x30c>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b38 <HAL_GPIO_Init+0x30c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ce:	4a5b      	ldr	r2, [pc, #364]	@ (8001b3c <HAL_GPIO_Init+0x310>)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a52      	ldr	r2, [pc, #328]	@ (8001b40 <HAL_GPIO_Init+0x314>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d02b      	beq.n	8001a52 <HAL_GPIO_Init+0x226>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a51      	ldr	r2, [pc, #324]	@ (8001b44 <HAL_GPIO_Init+0x318>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d025      	beq.n	8001a4e <HAL_GPIO_Init+0x222>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a50      	ldr	r2, [pc, #320]	@ (8001b48 <HAL_GPIO_Init+0x31c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d01f      	beq.n	8001a4a <HAL_GPIO_Init+0x21e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4f      	ldr	r2, [pc, #316]	@ (8001b4c <HAL_GPIO_Init+0x320>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d019      	beq.n	8001a46 <HAL_GPIO_Init+0x21a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4e      	ldr	r2, [pc, #312]	@ (8001b50 <HAL_GPIO_Init+0x324>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0x216>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001b54 <HAL_GPIO_Init+0x328>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00d      	beq.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4c      	ldr	r2, [pc, #304]	@ (8001b58 <HAL_GPIO_Init+0x32c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <HAL_GPIO_Init+0x20e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001b5c <HAL_GPIO_Init+0x330>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_GPIO_Init+0x20a>
 8001a32:	2307      	movs	r3, #7
 8001a34:	e00e      	b.n	8001a54 <HAL_GPIO_Init+0x228>
 8001a36:	2308      	movs	r3, #8
 8001a38:	e00c      	b.n	8001a54 <HAL_GPIO_Init+0x228>
 8001a3a:	2306      	movs	r3, #6
 8001a3c:	e00a      	b.n	8001a54 <HAL_GPIO_Init+0x228>
 8001a3e:	2305      	movs	r3, #5
 8001a40:	e008      	b.n	8001a54 <HAL_GPIO_Init+0x228>
 8001a42:	2304      	movs	r3, #4
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x228>
 8001a46:	2303      	movs	r3, #3
 8001a48:	e004      	b.n	8001a54 <HAL_GPIO_Init+0x228>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e002      	b.n	8001a54 <HAL_GPIO_Init+0x228>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_GPIO_Init+0x228>
 8001a52:	2300      	movs	r3, #0
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	f002 0203 	and.w	r2, r2, #3
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	4093      	lsls	r3, r2
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a64:	4935      	ldr	r1, [pc, #212]	@ (8001b3c <HAL_GPIO_Init+0x310>)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a72:	4b3b      	ldr	r3, [pc, #236]	@ (8001b60 <HAL_GPIO_Init+0x334>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a96:	4a32      	ldr	r2, [pc, #200]	@ (8001b60 <HAL_GPIO_Init+0x334>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a9c:	4b30      	ldr	r3, [pc, #192]	@ (8001b60 <HAL_GPIO_Init+0x334>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac0:	4a27      	ldr	r2, [pc, #156]	@ (8001b60 <HAL_GPIO_Init+0x334>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ac6:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <HAL_GPIO_Init+0x334>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aea:	4a1d      	ldr	r2, [pc, #116]	@ (8001b60 <HAL_GPIO_Init+0x334>)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <HAL_GPIO_Init+0x334>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b14:	4a12      	ldr	r2, [pc, #72]	@ (8001b60 <HAL_GPIO_Init+0x334>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	2b0f      	cmp	r3, #15
 8001b24:	f67f ae90 	bls.w	8001848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3724      	adds	r7, #36	@ 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40013800 	.word	0x40013800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020400 	.word	0x40020400
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020c00 	.word	0x40020c00
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40021400 	.word	0x40021400
 8001b58:	40021800 	.word	0x40021800
 8001b5c:	40021c00 	.word	0x40021c00
 8001b60:	40013c00 	.word	0x40013c00

08001b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e267      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d075      	beq.n	8001c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b82:	4b88      	ldr	r3, [pc, #544]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d00c      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8e:	4b85      	ldr	r3, [pc, #532]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d112      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9a:	4b82      	ldr	r3, [pc, #520]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ba6:	d10b      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d05b      	beq.n	8001c6c <HAL_RCC_OscConfig+0x108>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d157      	bne.n	8001c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e242      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc8:	d106      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x74>
 8001bca:	4b76      	ldr	r3, [pc, #472]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a75      	ldr	r2, [pc, #468]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e01d      	b.n	8001c14 <HAL_RCC_OscConfig+0xb0>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x98>
 8001be2:	4b70      	ldr	r3, [pc, #448]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6f      	ldr	r2, [pc, #444]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b6d      	ldr	r3, [pc, #436]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6c      	ldr	r2, [pc, #432]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0xb0>
 8001bfc:	4b69      	ldr	r3, [pc, #420]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a68      	ldr	r2, [pc, #416]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b66      	ldr	r3, [pc, #408]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a65      	ldr	r2, [pc, #404]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7fe ffe4 	bl	8000be8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7fe ffe0 	bl	8000be8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	@ 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e207      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b5b      	ldr	r3, [pc, #364]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0xc0>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7fe ffd0 	bl	8000be8 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7fe ffcc 	bl	8000be8 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	@ 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e1f3      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	4b51      	ldr	r3, [pc, #324]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0xe8>
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d063      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c86:	4b47      	ldr	r3, [pc, #284]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d11c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c92:	4b44      	ldr	r3, [pc, #272]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d116      	bne.n	8001ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9e:	4b41      	ldr	r3, [pc, #260]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x152>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e1c7      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4937      	ldr	r1, [pc, #220]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	e03a      	b.n	8001d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d020      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd4:	4b34      	ldr	r3, [pc, #208]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7fe ff85 	bl	8000be8 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7fe ff81 	bl	8000be8 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e1a8      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4b28      	ldr	r3, [pc, #160]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4925      	ldr	r1, [pc, #148]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b24      	ldr	r3, [pc, #144]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7fe ff64 	bl	8000be8 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d24:	f7fe ff60 	bl	8000be8 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e187      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d036      	beq.n	8001dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d016      	beq.n	8001d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <HAL_RCC_OscConfig+0x248>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7fe ff44 	bl	8000be8 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7fe ff40 	bl	8000be8 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e167      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <HAL_RCC_OscConfig+0x240>)
 8001d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x200>
 8001d82:	e01b      	b.n	8001dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d84:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <HAL_RCC_OscConfig+0x248>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7fe ff2d 	bl	8000be8 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	e00e      	b.n	8001db0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d92:	f7fe ff29 	bl	8000be8 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d907      	bls.n	8001db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e150      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
 8001da4:	40023800 	.word	0x40023800
 8001da8:	42470000 	.word	0x42470000
 8001dac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	4b88      	ldr	r3, [pc, #544]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1ea      	bne.n	8001d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 8097 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dce:	4b81      	ldr	r3, [pc, #516]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b7d      	ldr	r3, [pc, #500]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	4a7c      	ldr	r2, [pc, #496]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dea:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b77      	ldr	r3, [pc, #476]	@ (8001fd8 <HAL_RCC_OscConfig+0x474>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d118      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b74      	ldr	r3, [pc, #464]	@ (8001fd8 <HAL_RCC_OscConfig+0x474>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a73      	ldr	r2, [pc, #460]	@ (8001fd8 <HAL_RCC_OscConfig+0x474>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7fe fee9 	bl	8000be8 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1a:	f7fe fee5 	bl	8000be8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e10c      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8001fd8 <HAL_RCC_OscConfig+0x474>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x2ea>
 8001e40:	4b64      	ldr	r3, [pc, #400]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e44:	4a63      	ldr	r2, [pc, #396]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e4c:	e01c      	b.n	8001e88 <HAL_RCC_OscConfig+0x324>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x30c>
 8001e56:	4b5f      	ldr	r3, [pc, #380]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5a:	4a5e      	ldr	r2, [pc, #376]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e62:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e66:	4a5b      	ldr	r2, [pc, #364]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0x324>
 8001e70:	4b58      	ldr	r3, [pc, #352]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e74:	4a57      	ldr	r2, [pc, #348]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e7c:	4b55      	ldr	r3, [pc, #340]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e80:	4a54      	ldr	r2, [pc, #336]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001e82:	f023 0304 	bic.w	r3, r3, #4
 8001e86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d015      	beq.n	8001ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7fe feaa 	bl	8000be8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e98:	f7fe fea6 	bl	8000be8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e0cb      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eae:	4b49      	ldr	r3, [pc, #292]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0ee      	beq.n	8001e98 <HAL_RCC_OscConfig+0x334>
 8001eba:	e014      	b.n	8001ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7fe fe94 	bl	8000be8 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f7fe fe90 	bl	8000be8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e0b5      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eda:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ee      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eec:	4b39      	ldr	r3, [pc, #228]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	4a38      	ldr	r2, [pc, #224]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80a1 	beq.w	8002044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f02:	4b34      	ldr	r3, [pc, #208]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d05c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d141      	bne.n	8001f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b31      	ldr	r3, [pc, #196]	@ (8001fdc <HAL_RCC_OscConfig+0x478>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7fe fe64 	bl	8000be8 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7fe fe60 	bl	8000be8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e087      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	4b27      	ldr	r3, [pc, #156]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69da      	ldr	r2, [r3, #28]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	019b      	lsls	r3, r3, #6
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f58:	085b      	lsrs	r3, r3, #1
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	041b      	lsls	r3, r3, #16
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	061b      	lsls	r3, r3, #24
 8001f66:	491b      	ldr	r1, [pc, #108]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <HAL_RCC_OscConfig+0x478>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7fe fe39 	bl	8000be8 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7fe fe35 	bl	8000be8 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e05c      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8c:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x416>
 8001f98:	e054      	b.n	8002044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <HAL_RCC_OscConfig+0x478>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fe22 	bl	8000be8 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7fe fe1e 	bl	8000be8 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e045      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x444>
 8001fc6:	e03d      	b.n	8002044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e038      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <HAL_RCC_OscConfig+0x4ec>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d028      	beq.n	8002040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d121      	bne.n	8002040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d11a      	bne.n	8002040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002018:	4293      	cmp	r3, r2
 800201a:	d111      	bne.n	8002040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	3b01      	subs	r3, #1
 800202a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d107      	bne.n	8002040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800

08002054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0cc      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002068:	4b68      	ldr	r3, [pc, #416]	@ (800220c <HAL_RCC_ClockConfig+0x1b8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d90c      	bls.n	8002090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b65      	ldr	r3, [pc, #404]	@ (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b63      	ldr	r3, [pc, #396]	@ (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0b8      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d020      	beq.n	80020de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a8:	4b59      	ldr	r3, [pc, #356]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a58      	ldr	r2, [pc, #352]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c0:	4b53      	ldr	r3, [pc, #332]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a52      	ldr	r2, [pc, #328]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020cc:	4b50      	ldr	r3, [pc, #320]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	494d      	ldr	r1, [pc, #308]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d044      	beq.n	8002174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b47      	ldr	r3, [pc, #284]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d119      	bne.n	8002132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e07f      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d003      	beq.n	8002112 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210e:	2b03      	cmp	r3, #3
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	4b3f      	ldr	r3, [pc, #252]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e06f      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002122:	4b3b      	ldr	r3, [pc, #236]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e067      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002132:	4b37      	ldr	r3, [pc, #220]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 0203 	bic.w	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4934      	ldr	r1, [pc, #208]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002144:	f7fe fd50 	bl	8000be8 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	e00a      	b.n	8002162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214c:	f7fe fd4c 	bl	8000be8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e04f      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	4b2b      	ldr	r3, [pc, #172]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 020c 	and.w	r2, r3, #12
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	429a      	cmp	r2, r3
 8002172:	d1eb      	bne.n	800214c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b25      	ldr	r3, [pc, #148]	@ (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d20c      	bcs.n	800219c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b22      	ldr	r3, [pc, #136]	@ (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b20      	ldr	r3, [pc, #128]	@ (800220c <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e032      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a8:	4b19      	ldr	r3, [pc, #100]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4916      	ldr	r1, [pc, #88]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c6:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	490e      	ldr	r1, [pc, #56]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021da:	f000 f821 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80021de:	4602      	mov	r2, r0
 80021e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	490a      	ldr	r1, [pc, #40]	@ (8002214 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	5ccb      	ldrb	r3, [r1, r3]
 80021ee:	fa22 f303 	lsr.w	r3, r2, r3
 80021f2:	4a09      	ldr	r2, [pc, #36]	@ (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021f6:	4b09      	ldr	r3, [pc, #36]	@ (800221c <HAL_RCC_ClockConfig+0x1c8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fcb0 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023c00 	.word	0x40023c00
 8002210:	40023800 	.word	0x40023800
 8002214:	08002dcc 	.word	0x08002dcc
 8002218:	20000000 	.word	0x20000000
 800221c:	20000004 	.word	0x20000004

08002220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002224:	b090      	sub	sp, #64	@ 0x40
 8002226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002238:	4b59      	ldr	r3, [pc, #356]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d00d      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x40>
 8002244:	2b08      	cmp	r3, #8
 8002246:	f200 80a1 	bhi.w	800238c <HAL_RCC_GetSysClockFreq+0x16c>
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x34>
 800224e:	2b04      	cmp	r3, #4
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x3a>
 8002252:	e09b      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002254:	4b53      	ldr	r3, [pc, #332]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002256:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002258:	e09b      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800225a:	4b53      	ldr	r3, [pc, #332]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800225c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800225e:	e098      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002260:	4b4f      	ldr	r3, [pc, #316]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002268:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226a:	4b4d      	ldr	r3, [pc, #308]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d028      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002276:	4b4a      	ldr	r3, [pc, #296]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	099b      	lsrs	r3, r3, #6
 800227c:	2200      	movs	r2, #0
 800227e:	623b      	str	r3, [r7, #32]
 8002280:	627a      	str	r2, [r7, #36]	@ 0x24
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002288:	2100      	movs	r1, #0
 800228a:	4b47      	ldr	r3, [pc, #284]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800228c:	fb03 f201 	mul.w	r2, r3, r1
 8002290:	2300      	movs	r3, #0
 8002292:	fb00 f303 	mul.w	r3, r0, r3
 8002296:	4413      	add	r3, r2
 8002298:	4a43      	ldr	r2, [pc, #268]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800229a:	fba0 1202 	umull	r1, r2, r0, r2
 800229e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022a0:	460a      	mov	r2, r1
 80022a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80022a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022a6:	4413      	add	r3, r2
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ac:	2200      	movs	r2, #0
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	61fa      	str	r2, [r7, #28]
 80022b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80022ba:	f7fd ff85 	bl	80001c8 <__aeabi_uldivmod>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4613      	mov	r3, r2
 80022c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022c6:	e053      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c8:	4b35      	ldr	r3, [pc, #212]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	2200      	movs	r2, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	617a      	str	r2, [r7, #20]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022da:	f04f 0b00 	mov.w	fp, #0
 80022de:	4652      	mov	r2, sl
 80022e0:	465b      	mov	r3, fp
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	0159      	lsls	r1, r3, #5
 80022ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f0:	0150      	lsls	r0, r2, #5
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	ebb2 080a 	subs.w	r8, r2, sl
 80022fa:	eb63 090b 	sbc.w	r9, r3, fp
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800230a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800230e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002312:	ebb2 0408 	subs.w	r4, r2, r8
 8002316:	eb63 0509 	sbc.w	r5, r3, r9
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	00eb      	lsls	r3, r5, #3
 8002324:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002328:	00e2      	lsls	r2, r4, #3
 800232a:	4614      	mov	r4, r2
 800232c:	461d      	mov	r5, r3
 800232e:	eb14 030a 	adds.w	r3, r4, sl
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	eb45 030b 	adc.w	r3, r5, fp
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002346:	4629      	mov	r1, r5
 8002348:	028b      	lsls	r3, r1, #10
 800234a:	4621      	mov	r1, r4
 800234c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002350:	4621      	mov	r1, r4
 8002352:	028a      	lsls	r2, r1, #10
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800235a:	2200      	movs	r2, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	60fa      	str	r2, [r7, #12]
 8002360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002364:	f7fd ff30 	bl	80001c8 <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4613      	mov	r3, r2
 800236e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	3301      	adds	r3, #1
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002380:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800238a:	e002      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800238e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002394:	4618      	mov	r0, r3
 8002396:	3740      	adds	r7, #64	@ 0x40
 8002398:	46bd      	mov	sp, r7
 800239a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	00f42400 	.word	0x00f42400
 80023a8:	017d7840 	.word	0x017d7840

080023ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e041      	b.n	8002442 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fad0 	bl	8000978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3304      	adds	r3, #4
 80023e8:	4619      	mov	r1, r3
 80023ea:	4610      	mov	r0, r2
 80023ec:	f000 f9b8 	bl	8002760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_TIM_PWM_Start+0x24>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	bf14      	ite	ne
 8002468:	2301      	movne	r3, #1
 800246a:	2300      	moveq	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e022      	b.n	80024b6 <HAL_TIM_PWM_Start+0x6a>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	2b04      	cmp	r3, #4
 8002474:	d109      	bne.n	800248a <HAL_TIM_PWM_Start+0x3e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	bf14      	ite	ne
 8002482:	2301      	movne	r3, #1
 8002484:	2300      	moveq	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	e015      	b.n	80024b6 <HAL_TIM_PWM_Start+0x6a>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d109      	bne.n	80024a4 <HAL_TIM_PWM_Start+0x58>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b01      	cmp	r3, #1
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	e008      	b.n	80024b6 <HAL_TIM_PWM_Start+0x6a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e07c      	b.n	80025b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d104      	bne.n	80024ce <HAL_TIM_PWM_Start+0x82>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024cc:	e013      	b.n	80024f6 <HAL_TIM_PWM_Start+0xaa>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d104      	bne.n	80024de <HAL_TIM_PWM_Start+0x92>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024dc:	e00b      	b.n	80024f6 <HAL_TIM_PWM_Start+0xaa>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d104      	bne.n	80024ee <HAL_TIM_PWM_Start+0xa2>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024ec:	e003      	b.n	80024f6 <HAL_TIM_PWM_Start+0xaa>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2201      	movs	r2, #1
 80024fc:	6839      	ldr	r1, [r7, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fb8a 	bl	8002c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2d      	ldr	r2, [pc, #180]	@ (80025c0 <HAL_TIM_PWM_Start+0x174>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_TIM_PWM_Start+0xcc>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a2c      	ldr	r2, [pc, #176]	@ (80025c4 <HAL_TIM_PWM_Start+0x178>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_TIM_PWM_Start+0xd0>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_TIM_PWM_Start+0xd2>
 800251c:	2300      	movs	r3, #0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002530:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <HAL_TIM_PWM_Start+0x174>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <HAL_TIM_PWM_Start+0x136>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002544:	d01d      	beq.n	8002582 <HAL_TIM_PWM_Start+0x136>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1f      	ldr	r2, [pc, #124]	@ (80025c8 <HAL_TIM_PWM_Start+0x17c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d018      	beq.n	8002582 <HAL_TIM_PWM_Start+0x136>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1d      	ldr	r2, [pc, #116]	@ (80025cc <HAL_TIM_PWM_Start+0x180>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_TIM_PWM_Start+0x136>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1c      	ldr	r2, [pc, #112]	@ (80025d0 <HAL_TIM_PWM_Start+0x184>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00e      	beq.n	8002582 <HAL_TIM_PWM_Start+0x136>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a16      	ldr	r2, [pc, #88]	@ (80025c4 <HAL_TIM_PWM_Start+0x178>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d009      	beq.n	8002582 <HAL_TIM_PWM_Start+0x136>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a18      	ldr	r2, [pc, #96]	@ (80025d4 <HAL_TIM_PWM_Start+0x188>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d004      	beq.n	8002582 <HAL_TIM_PWM_Start+0x136>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a16      	ldr	r2, [pc, #88]	@ (80025d8 <HAL_TIM_PWM_Start+0x18c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d111      	bne.n	80025a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b06      	cmp	r3, #6
 8002592:	d010      	beq.n	80025b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a4:	e007      	b.n	80025b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0201 	orr.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40010000 	.word	0x40010000
 80025c4:	40010400 	.word	0x40010400
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40000800 	.word	0x40000800
 80025d0:	40000c00 	.word	0x40000c00
 80025d4:	40014000 	.word	0x40014000
 80025d8:	40001800 	.word	0x40001800

080025dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e0ae      	b.n	8002758 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b0c      	cmp	r3, #12
 8002606:	f200 809f 	bhi.w	8002748 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800260a:	a201      	add	r2, pc, #4	@ (adr r2, 8002610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	08002645 	.word	0x08002645
 8002614:	08002749 	.word	0x08002749
 8002618:	08002749 	.word	0x08002749
 800261c:	08002749 	.word	0x08002749
 8002620:	08002685 	.word	0x08002685
 8002624:	08002749 	.word	0x08002749
 8002628:	08002749 	.word	0x08002749
 800262c:	08002749 	.word	0x08002749
 8002630:	080026c7 	.word	0x080026c7
 8002634:	08002749 	.word	0x08002749
 8002638:	08002749 	.word	0x08002749
 800263c:	08002749 	.word	0x08002749
 8002640:	08002707 	.word	0x08002707
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f934 	bl	80028b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0208 	orr.w	r2, r2, #8
 800265e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6999      	ldr	r1, [r3, #24]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	619a      	str	r2, [r3, #24]
      break;
 8002682:	e064      	b.n	800274e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f984 	bl	8002998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800269e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6999      	ldr	r1, [r3, #24]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	021a      	lsls	r2, r3, #8
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	619a      	str	r2, [r3, #24]
      break;
 80026c4:	e043      	b.n	800274e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 f9d9 	bl	8002a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0208 	orr.w	r2, r2, #8
 80026e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0204 	bic.w	r2, r2, #4
 80026f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69d9      	ldr	r1, [r3, #28]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	61da      	str	r2, [r3, #28]
      break;
 8002704:	e023      	b.n	800274e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fa2d 	bl	8002b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69da      	ldr	r2, [r3, #28]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69d9      	ldr	r1, [r3, #28]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	021a      	lsls	r2, r3, #8
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	61da      	str	r2, [r3, #28]
      break;
 8002746:	e002      	b.n	800274e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	75fb      	strb	r3, [r7, #23]
      break;
 800274c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a46      	ldr	r2, [pc, #280]	@ (800288c <TIM_Base_SetConfig+0x12c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d013      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800277e:	d00f      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a43      	ldr	r2, [pc, #268]	@ (8002890 <TIM_Base_SetConfig+0x130>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00b      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a42      	ldr	r2, [pc, #264]	@ (8002894 <TIM_Base_SetConfig+0x134>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d007      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a41      	ldr	r2, [pc, #260]	@ (8002898 <TIM_Base_SetConfig+0x138>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d003      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a40      	ldr	r2, [pc, #256]	@ (800289c <TIM_Base_SetConfig+0x13c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d108      	bne.n	80027b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a35      	ldr	r2, [pc, #212]	@ (800288c <TIM_Base_SetConfig+0x12c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d02b      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027c0:	d027      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a32      	ldr	r2, [pc, #200]	@ (8002890 <TIM_Base_SetConfig+0x130>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d023      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a31      	ldr	r2, [pc, #196]	@ (8002894 <TIM_Base_SetConfig+0x134>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01f      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a30      	ldr	r2, [pc, #192]	@ (8002898 <TIM_Base_SetConfig+0x138>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01b      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a2f      	ldr	r2, [pc, #188]	@ (800289c <TIM_Base_SetConfig+0x13c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d017      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a2e      	ldr	r2, [pc, #184]	@ (80028a0 <TIM_Base_SetConfig+0x140>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a2d      	ldr	r2, [pc, #180]	@ (80028a4 <TIM_Base_SetConfig+0x144>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00f      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a2c      	ldr	r2, [pc, #176]	@ (80028a8 <TIM_Base_SetConfig+0x148>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00b      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a2b      	ldr	r2, [pc, #172]	@ (80028ac <TIM_Base_SetConfig+0x14c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a2a      	ldr	r2, [pc, #168]	@ (80028b0 <TIM_Base_SetConfig+0x150>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d003      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a29      	ldr	r2, [pc, #164]	@ (80028b4 <TIM_Base_SetConfig+0x154>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d108      	bne.n	8002824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a10      	ldr	r2, [pc, #64]	@ (800288c <TIM_Base_SetConfig+0x12c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0xf8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <TIM_Base_SetConfig+0x13c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d103      	bne.n	8002860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d105      	bne.n	800287e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f023 0201 	bic.w	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	611a      	str	r2, [r3, #16]
  }
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40010000 	.word	0x40010000
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800
 8002898:	40000c00 	.word	0x40000c00
 800289c:	40010400 	.word	0x40010400
 80028a0:	40014000 	.word	0x40014000
 80028a4:	40014400 	.word	0x40014400
 80028a8:	40014800 	.word	0x40014800
 80028ac:	40001800 	.word	0x40001800
 80028b0:	40001c00 	.word	0x40001c00
 80028b4:	40002000 	.word	0x40002000

080028b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f023 0201 	bic.w	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0303 	bic.w	r3, r3, #3
 80028ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f023 0302 	bic.w	r3, r3, #2
 8002900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a20      	ldr	r2, [pc, #128]	@ (8002990 <TIM_OC1_SetConfig+0xd8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d003      	beq.n	800291c <TIM_OC1_SetConfig+0x64>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a1f      	ldr	r2, [pc, #124]	@ (8002994 <TIM_OC1_SetConfig+0xdc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10c      	bne.n	8002936 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f023 0308 	bic.w	r3, r3, #8
 8002922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a15      	ldr	r2, [pc, #84]	@ (8002990 <TIM_OC1_SetConfig+0xd8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_OC1_SetConfig+0x8e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a14      	ldr	r2, [pc, #80]	@ (8002994 <TIM_OC1_SetConfig+0xdc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d111      	bne.n	800296a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800294c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	621a      	str	r2, [r3, #32]
}
 8002984:	bf00      	nop
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40010000 	.word	0x40010000
 8002994:	40010400 	.word	0x40010400

08002998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f023 0210 	bic.w	r2, r3, #16
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f023 0320 	bic.w	r3, r3, #32
 80029e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a22      	ldr	r2, [pc, #136]	@ (8002a7c <TIM_OC2_SetConfig+0xe4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <TIM_OC2_SetConfig+0x68>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a21      	ldr	r2, [pc, #132]	@ (8002a80 <TIM_OC2_SetConfig+0xe8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d10d      	bne.n	8002a1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a17      	ldr	r2, [pc, #92]	@ (8002a7c <TIM_OC2_SetConfig+0xe4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d003      	beq.n	8002a2c <TIM_OC2_SetConfig+0x94>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a16      	ldr	r2, [pc, #88]	@ (8002a80 <TIM_OC2_SetConfig+0xe8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d113      	bne.n	8002a54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	621a      	str	r2, [r3, #32]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40010400 	.word	0x40010400

08002a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 0303 	bic.w	r3, r3, #3
 8002aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a21      	ldr	r2, [pc, #132]	@ (8002b64 <TIM_OC3_SetConfig+0xe0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d003      	beq.n	8002aea <TIM_OC3_SetConfig+0x66>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a20      	ldr	r2, [pc, #128]	@ (8002b68 <TIM_OC3_SetConfig+0xe4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10d      	bne.n	8002b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a16      	ldr	r2, [pc, #88]	@ (8002b64 <TIM_OC3_SetConfig+0xe0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d003      	beq.n	8002b16 <TIM_OC3_SetConfig+0x92>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a15      	ldr	r2, [pc, #84]	@ (8002b68 <TIM_OC3_SetConfig+0xe4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d113      	bne.n	8002b3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	621a      	str	r2, [r3, #32]
}
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40010400 	.word	0x40010400

08002b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	031b      	lsls	r3, r3, #12
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a12      	ldr	r2, [pc, #72]	@ (8002c10 <TIM_OC4_SetConfig+0xa4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d003      	beq.n	8002bd4 <TIM_OC4_SetConfig+0x68>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a11      	ldr	r2, [pc, #68]	@ (8002c14 <TIM_OC4_SetConfig+0xa8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d109      	bne.n	8002be8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	019b      	lsls	r3, r3, #6
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	621a      	str	r2, [r3, #32]
}
 8002c02:	bf00      	nop
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40010000 	.word	0x40010000
 8002c14:	40010400 	.word	0x40010400

08002c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a1a      	ldr	r2, [r3, #32]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e05a      	b.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a21      	ldr	r2, [pc, #132]	@ (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d022      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc8:	d01d      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1d      	ldr	r2, [pc, #116]	@ (8002d44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d018      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00e      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a18      	ldr	r2, [pc, #96]	@ (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a15      	ldr	r2, [pc, #84]	@ (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10c      	bne.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40010000 	.word	0x40010000
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40000800 	.word	0x40000800
 8002d4c:	40000c00 	.word	0x40000c00
 8002d50:	40010400 	.word	0x40010400
 8002d54:	40014000 	.word	0x40014000
 8002d58:	40001800 	.word	0x40001800

08002d5c <memset>:
 8002d5c:	4402      	add	r2, r0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d100      	bne.n	8002d66 <memset+0xa>
 8002d64:	4770      	bx	lr
 8002d66:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6a:	e7f9      	b.n	8002d60 <memset+0x4>

08002d6c <__libc_init_array>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8002da4 <__libc_init_array+0x38>)
 8002d70:	4c0d      	ldr	r4, [pc, #52]	@ (8002da8 <__libc_init_array+0x3c>)
 8002d72:	1b64      	subs	r4, r4, r5
 8002d74:	10a4      	asrs	r4, r4, #2
 8002d76:	2600      	movs	r6, #0
 8002d78:	42a6      	cmp	r6, r4
 8002d7a:	d109      	bne.n	8002d90 <__libc_init_array+0x24>
 8002d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8002dac <__libc_init_array+0x40>)
 8002d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8002db0 <__libc_init_array+0x44>)
 8002d80:	f000 f818 	bl	8002db4 <_init>
 8002d84:	1b64      	subs	r4, r4, r5
 8002d86:	10a4      	asrs	r4, r4, #2
 8002d88:	2600      	movs	r6, #0
 8002d8a:	42a6      	cmp	r6, r4
 8002d8c:	d105      	bne.n	8002d9a <__libc_init_array+0x2e>
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
 8002d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d94:	4798      	blx	r3
 8002d96:	3601      	adds	r6, #1
 8002d98:	e7ee      	b.n	8002d78 <__libc_init_array+0xc>
 8002d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9e:	4798      	blx	r3
 8002da0:	3601      	adds	r6, #1
 8002da2:	e7f2      	b.n	8002d8a <__libc_init_array+0x1e>
 8002da4:	08002de4 	.word	0x08002de4
 8002da8:	08002de4 	.word	0x08002de4
 8002dac:	08002de4 	.word	0x08002de4
 8002db0:	08002de8 	.word	0x08002de8

08002db4 <_init>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	bf00      	nop
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr

08002dc0 <_fini>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	bf00      	nop
 8002dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc6:	bc08      	pop	{r3}
 8002dc8:	469e      	mov	lr, r3
 8002dca:	4770      	bx	lr
